from contextlib import asynccontextmanager
import asyncio
from fastapi import FastAPI
from app.auth.auth_user import auth_router
from fastapi.middleware.cors import CORSMiddleware
from app.routers.task_r import router_task
from app.routers.user_r import router_user
from app.backend.db_depends import get_async_db
from fastapi.staticfiles import StaticFiles
from starlette.responses import FileResponse
import os


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup - –∑–¥–µ—Å—å —Ä–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    await create_tables()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üéØ Task Manager API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    print("API –¥–æ—Å—Ç—É–ø–Ω–æ:")
    print("  - –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api: http://localhost:8000/api/")
    print("  - –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–¥–ª—è –ø—Ä–æ–∫—Å–∏): http://localhost:8000/")
    print("  - Swagger UI: http://localhost:8000/docs")

    yield  # ‚Üê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # Shutdown - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    print("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

app = FastAPI(
    title="TaskManager API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
    version="1.0.0"
)
origins = [
    "http://localhost:3000"
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api (–¥–ª—è Swagger –∏ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
app.include_router(router_user, prefix="/api")
app.include_router(router_task, prefix="/api")
app.include_router(auth_router, prefix="/api")

# –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ä–æ—É—Ç–µ—Ä—ã –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–¥–ª—è React –ø—Ä–æ–∫—Å–∏)
app.include_router(router_user, prefix="", tags=["users-proxy"])
app.include_router(router_task, prefix="", tags=["tasks-proxy"])
app.include_router(auth_router, prefix="", tags=["auth-proxy"])

@app.get("/", tags=["root"])
async def root():
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskManager API",
        "docs_url": "/docs",
        "redoc_url": "/redoc",
        "version": "1.0.0"
    }

@app.get("/api/", tags=["root"])
async def api_root():
    return {
        "message": "TaskManager API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "docs_url": "/docs",
        "redoc_url": "/redoc",
        "version": "1.0.0"
    }

# –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ React –∏–∑ –ø–∞–ø–∫–∏ build
app.mount("/static", StaticFiles(directory="build/static"), name="static")

from fastapi import HTTPException

@app.get("/{full_path:path}")
async def serve_spa(full_path: str):
    if full_path.startswith("api") or full_path.startswith("static"):
        raise HTTPException(status_code=404)
    index_path = os.path.join("build", "index.html")
    return FileResponse(index_path)


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
