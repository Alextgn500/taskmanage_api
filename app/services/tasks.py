import logging
from sqlalchemy.orm import Session
from datetime import datetime
from sqlalchemy.future import select
from sqlalchemy import and_
from slugify import slugify
from fastapi import HTTPException
from sqlalchemy.exc import SQLAlchemyError

from app.models.task_m import Tasks
from app.schemas.task_s import TaskResponse, CreateTask, UpdateTask


async def get_all_tasks(skip: int, limit: int, db: Session):
    result = await db.execute(select(Tasks).offset(skip).limit(limit))
    tasks = result.scalars().all()
    return tasks


async def get_task_by_id(task_id: int, db: Session):
    result = await db.execute(select(Tasks).where(Tasks.id == task_id))
    task = result.scalars().first()
    if task is None:
        raise HTTPException(status_code=404, detail="Task not found")
    return task


logger = logging.getLogger(__name__)


async def create_task(task: CreateTask, db: Session):
    print(f"üöÄ create_task –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏: {task.title}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π slug
    base_slug = slugify(task.title)
    print(f"üîß –ë–∞–∑–æ–≤—ã–π slug: {base_slug}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
    slug_result = await db.execute(select(Tasks).where(Tasks.slug == base_slug))
    existing_slug = slug_result.scalars().first()

    if existing_slug:
        timestamp = int(datetime.now().timestamp())
        unique_slug = f"{base_slug}-{timestamp}"
        print(f"üîß Slug –∑–∞–Ω—è—Ç, —Å–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π: {unique_slug}")
    else:
        unique_slug = base_slug
        print(f"üîß Slug —Å–≤–æ–±–æ–¥–µ–Ω: {unique_slug}")

    db_task = Tasks(
        title=task.title,
        content=task.content,
        priority=task.priority,
        completed=task.completed,
        user_id=task.user_id,
        slug=unique_slug
    )

    print(f"üéØ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É —Å–æ slug: {unique_slug}")

    db.add(db_task)
    await db.commit()
    await db.refresh(db_task)

    print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {db_task.id}, slug: {db_task.slug}")
    return db_task


async def update_task(task_id: int, task: UpdateTask, db: Session):
    result = await db.execute(select(Tasks).where(Tasks.id == task_id))
    db_task = result.scalar_one_or_none()

    if not db_task:
        raise HTTPException(status_code=404, detail="Task not found")

    for key, value in task.model_dump(exclude_unset=True).items():
        setattr(db_task, key, value)

    await db.commit()
    await db.refresh(db_task)
    return db_task


async def delete_task(task_id: int, db: Session):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID.

    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        dict: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏

    Raises:
        HTTPException: –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    """
    try:
        # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ ID
        result = await db.execute(select(Tasks).where(Tasks.id == task_id))
        db_task = result.scalar_one_or_none()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        if db_task is None:
            raise HTTPException(status_code=404, detail="Task not found")

        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        await db.delete(db_task)  # –î–æ–±–∞–≤–ª–µ–Ω await
        await db.commit()

        return {"detail": "Task deleted successfully"}

    except HTTPException:
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTPException –¥–∞–ª—å—à–µ
        raise

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        await db.rollback()  # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        raise HTTPException(
            status_code=500,
            detail=f"Error deleting task: {str(e)}"
        )


async def delete_tasks_by_user(user_id: int, db: Session):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        result = await db.execute(select(Tasks).where(Tasks.user_id == user_id))
        tasks = result.scalars().all()

        for task in tasks:
            await db.delete(task)  # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É

        return len(tasks)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        print(f"Error in delete_tasks_by_user: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error deleting tasks: {str(e)}"
        )
